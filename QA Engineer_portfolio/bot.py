import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from config import TOKEN
from keyboards import main_menu, back_button

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ
@dp.message(lambda message: message.text == "/start")
async def start_command(message: types.Message):
    try:
        photo = FSInputFile("images/elena2.jpg")
        await message.answer_photo(
            photo,
            caption=(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø **–ï–ª–µ–Ω–∞ –ó–∞–ø–æ–¥–æ–π–Ω–∏–∫–æ–≤–∞**, QA Engineer.\n"
                "–û–ø—ã—Ç: 4+ –≥–æ–¥–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –±–æ–ª—å—à–µ üëá"
            ),
            parse_mode="Markdown",
            reply_markup=main_menu
        )
    except Exception:
        await message.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª images/elena.jpg —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

from aiogram.types import FSInputFile

@dp.callback_query(lambda c: c.data == "about")
async def about_handler(callback_query: types.CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    await callback_query.message.answer(
        "üîπ <b>–û —Å–µ–±–µ:</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ï–ª–µ–Ω–∞, QA Engineer (—Ä—É—á–Ω–æ–µ –∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö/–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π).\n"
        "4+ –≥–æ–¥–∞ –æ–ø—ã—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤, –ª—é–±–ª—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É ü´∂\n\n"
        "üëá <b>–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ –º–Ω–æ–π –ª–∏—á–Ω–æ ‚Äî –≤–∏–¥–µ–æ –Ω–∏–∂–µ!</b>",
        parse_mode="HTML",
        reply_markup=back_button
    )
    # –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ-—Ñ–∞–π–ª
    video = FSInputFile("media/lena.mp4")  # –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    await callback_query.message.answer_video(
        video,
        caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ï–ª–µ–Ω–∞, —Ä–∞—Å—Å–∫–∞–∂—É –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.",
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "skills")
async def skills_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "<b>üõ†Ô∏è –ú–æ–∏ –Ω–∞–≤—ã–∫–∏:</b>\n"
        "- –¢–µ—Å—Ç-–¥–∏–∑–∞–π–Ω (—á–µ–∫-–ª–∏—Å—Ç—ã, —Ç–µ—Å—Ç-–∫–µ–π—Å—ã)\n"
        "- Jira, YouTrack, –±–∞–≥-—Ç—Ä–µ–∫–∏–Ω–≥\n"
        "- Postman, DevTools, Charles\n"
        "- –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã: PyTest, Selenium\n"
        "- SQL, API, REST\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤\n"
        "- Git, GitHub Actions\n"
        "\n"
        "<b>ü¶æ QA –°—Ç—ç–∫:</b>\n"
        "API, Postman, DevTools, TestIT, Allure, Cypress, Pytest, Sentry,\n"
        "Grafana, Swagger, SOAP UI, Jmeter, Git, Jira, Agile, Python, HTML,\n"
        "CSS, Selenium, PostgreSQL, Android Studio, Kafka, CI/CD, Docker, Charles,\n"
        "REST, Kibana",
        parse_mode="HTML",
        reply_markup=back_button
    )

from aiogram.types import FSInputFile

@dp.callback_query(lambda c: c.data == "projects")
async def projects_handler(callback_query: types.CallbackQuery):
    # 1. –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏–ª–∏ —á—Ç–æ-—Ç–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ)
    photo = FSInputFile("images/qacat.jpg")  # –ø—É—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ç–æ
    await callback_query.message.answer_photo(
        photo,
        caption="üìÇ –ú–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–Ω–∏–∂–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ üëá)",
        reply_markup=None  # –ú–æ–∂–Ω–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–æ—Ç–∫–∏
    )
    # 2. –ü–æ—Ç–æ–º ‚Äî —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    await callback_query.message.answer(
        "üìÇ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:\n"
        "- –ø—Ä–æ–≤–æ–¥–∏–ª–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ, UX, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ, –∫—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤), API-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ web –∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ê—Å–∫–æ–Ω–∞ (—Ñ–∏–ª—å—Ç—Ä—ã, –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º); —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ –∞–¥–º–∏–Ω–∫—É —Å–∞–π—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–ª–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∞—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ —Ç–µ–≥–∞–º, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (–Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\ —Ç–æ–≤–∞—Ä–∞–º–∏ (–º–∞—Ç—Ä–∞—Å–∞–º–∏, –¥–∏–≤–∞–Ω–∞–º–∏ –∏ —Ç. –¥.), –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞ headless CMS Strapi, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–°. –ê–¥–º–∏–Ω–∫–∞ –ø–æ–∑–≤–æ–ª—è–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–µ –≤—Ä—É—á–Ω—É—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–∞–ª–∞ —Ç–æ–≤–∞—Ä—ã –≤ –Ω—É–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å–∞–π—Ç–∞. –≠—Ç–æ —É—Å–∫–æ—Ä—è–ª–æ —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–æ–º–∞–Ω–¥—ã –∏ —Å–Ω–∏–∂–∞–ª–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫)\n"
        " - –ø—Ä–æ–≤–æ–¥–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –ø—Ä–æ–≤–µ—Ä—è–ª–∞ —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª–∏—Å–æ–≤, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è API: –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã –Ω–∞ PyTest\n"
        "- GitHub: https://github.com/elenazapodoynikovaQA",
        reply_markup=back_button
    )

# –ü–æ–ª–µ–∑–Ω–∞—è —Ç–µ–æ—Ä–∏—è
@dp.callback_query(lambda c: c.data == "theory")
async def theory_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üìö –ü–æ–ª–µ–∑–Ω–∞—è —Ç–µ–æ—Ä–∏—è –¥–ª—è QA –∏–Ω–∂–µ–Ω–µ—Ä–∞:\n"
        "[Charles Proxy –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, HTTPS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∫–µ–π—Å—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (vc.ru)](https://vc.ru/dev/1995257-charles-proxy-dlya-testirovshchikov)\n"
        "[–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–æ–≥–æ: –±–∞–≥–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö, UX –∏ –ª–æ–≥–∏–∫–µ –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (vc.ru)](https://vc.ru/dev/2025478-testirovanie-filtrov-tovarov-bagi-ux-i-logika-podbora)\n"
        "[–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è QA, —à–ø–∞—Ä–≥–∞–ª–∫–∏](https://disk.yandex.ru/d/NDqHxCmLyHzAng)\n"
        "‚ú® –ü–æ–¥–±–æ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚ú®",
        parse_mode="Markdown",
        reply_markup=back_button
    )

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query(lambda c: c.data == "contacts")
async def contacts_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
        "Telegram: @Elneuro83\n"
        "Email: lenazew283@gmail.com",
        reply_markup=back_button
    )

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
